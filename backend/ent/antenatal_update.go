// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/F12aPPy/app/ent/antenatal"
	"github.com/F12aPPy/app/ent/babystatus"
	"github.com/F12aPPy/app/ent/patient"
	"github.com/F12aPPy/app/ent/predicate"
	"github.com/F12aPPy/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// AntenatalUpdate is the builder for updating Antenatal entities.
type AntenatalUpdate struct {
	config
	hooks      []Hook
	mutation   *AntenatalMutation
	predicates []predicate.Antenatal
}

// Where adds a new predicate for the builder.
func (au *AntenatalUpdate) Where(ps ...predicate.Antenatal) *AntenatalUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetAddedTime sets the added_time field.
func (au *AntenatalUpdate) SetAddedTime(t time.Time) *AntenatalUpdate {
	au.mutation.SetAddedTime(t)
	return au
}

// SetUserID sets the user edge to User by id.
func (au *AntenatalUpdate) SetUserID(id int) *AntenatalUpdate {
	au.mutation.SetUserID(id)
	return au
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (au *AntenatalUpdate) SetNillableUserID(id *int) *AntenatalUpdate {
	if id != nil {
		au = au.SetUserID(*id)
	}
	return au
}

// SetUser sets the user edge to User.
func (au *AntenatalUpdate) SetUser(u *User) *AntenatalUpdate {
	return au.SetUserID(u.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (au *AntenatalUpdate) SetPatientID(id int) *AntenatalUpdate {
	au.mutation.SetPatientID(id)
	return au
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (au *AntenatalUpdate) SetNillablePatientID(id *int) *AntenatalUpdate {
	if id != nil {
		au = au.SetPatientID(*id)
	}
	return au
}

// SetPatient sets the patient edge to Patient.
func (au *AntenatalUpdate) SetPatient(p *Patient) *AntenatalUpdate {
	return au.SetPatientID(p.ID)
}

// SetBabystatusID sets the babystatus edge to Babystatus by id.
func (au *AntenatalUpdate) SetBabystatusID(id int) *AntenatalUpdate {
	au.mutation.SetBabystatusID(id)
	return au
}

// SetNillableBabystatusID sets the babystatus edge to Babystatus by id if the given value is not nil.
func (au *AntenatalUpdate) SetNillableBabystatusID(id *int) *AntenatalUpdate {
	if id != nil {
		au = au.SetBabystatusID(*id)
	}
	return au
}

// SetBabystatus sets the babystatus edge to Babystatus.
func (au *AntenatalUpdate) SetBabystatus(b *Babystatus) *AntenatalUpdate {
	return au.SetBabystatusID(b.ID)
}

// Mutation returns the AntenatalMutation object of the builder.
func (au *AntenatalUpdate) Mutation() *AntenatalMutation {
	return au.mutation
}

// ClearUser clears the user edge to User.
func (au *AntenatalUpdate) ClearUser() *AntenatalUpdate {
	au.mutation.ClearUser()
	return au
}

// ClearPatient clears the patient edge to Patient.
func (au *AntenatalUpdate) ClearPatient() *AntenatalUpdate {
	au.mutation.ClearPatient()
	return au
}

// ClearBabystatus clears the babystatus edge to Babystatus.
func (au *AntenatalUpdate) ClearBabystatus() *AntenatalUpdate {
	au.mutation.ClearBabystatus()
	return au
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AntenatalUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AntenatalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AntenatalUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AntenatalUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AntenatalUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AntenatalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   antenatal.Table,
			Columns: antenatal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: antenatal.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: antenatal.FieldAddedTime,
		})
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.UserTable,
			Columns: []string{antenatal.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.UserTable,
			Columns: []string{antenatal.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.PatientTable,
			Columns: []string{antenatal.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.PatientTable,
			Columns: []string{antenatal.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.BabystatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.BabystatusTable,
			Columns: []string{antenatal.BabystatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: babystatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.BabystatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.BabystatusTable,
			Columns: []string{antenatal.BabystatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: babystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{antenatal.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AntenatalUpdateOne is the builder for updating a single Antenatal entity.
type AntenatalUpdateOne struct {
	config
	hooks    []Hook
	mutation *AntenatalMutation
}

// SetAddedTime sets the added_time field.
func (auo *AntenatalUpdateOne) SetAddedTime(t time.Time) *AntenatalUpdateOne {
	auo.mutation.SetAddedTime(t)
	return auo
}

// SetUserID sets the user edge to User by id.
func (auo *AntenatalUpdateOne) SetUserID(id int) *AntenatalUpdateOne {
	auo.mutation.SetUserID(id)
	return auo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (auo *AntenatalUpdateOne) SetNillableUserID(id *int) *AntenatalUpdateOne {
	if id != nil {
		auo = auo.SetUserID(*id)
	}
	return auo
}

// SetUser sets the user edge to User.
func (auo *AntenatalUpdateOne) SetUser(u *User) *AntenatalUpdateOne {
	return auo.SetUserID(u.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (auo *AntenatalUpdateOne) SetPatientID(id int) *AntenatalUpdateOne {
	auo.mutation.SetPatientID(id)
	return auo
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (auo *AntenatalUpdateOne) SetNillablePatientID(id *int) *AntenatalUpdateOne {
	if id != nil {
		auo = auo.SetPatientID(*id)
	}
	return auo
}

// SetPatient sets the patient edge to Patient.
func (auo *AntenatalUpdateOne) SetPatient(p *Patient) *AntenatalUpdateOne {
	return auo.SetPatientID(p.ID)
}

// SetBabystatusID sets the babystatus edge to Babystatus by id.
func (auo *AntenatalUpdateOne) SetBabystatusID(id int) *AntenatalUpdateOne {
	auo.mutation.SetBabystatusID(id)
	return auo
}

// SetNillableBabystatusID sets the babystatus edge to Babystatus by id if the given value is not nil.
func (auo *AntenatalUpdateOne) SetNillableBabystatusID(id *int) *AntenatalUpdateOne {
	if id != nil {
		auo = auo.SetBabystatusID(*id)
	}
	return auo
}

// SetBabystatus sets the babystatus edge to Babystatus.
func (auo *AntenatalUpdateOne) SetBabystatus(b *Babystatus) *AntenatalUpdateOne {
	return auo.SetBabystatusID(b.ID)
}

// Mutation returns the AntenatalMutation object of the builder.
func (auo *AntenatalUpdateOne) Mutation() *AntenatalMutation {
	return auo.mutation
}

// ClearUser clears the user edge to User.
func (auo *AntenatalUpdateOne) ClearUser() *AntenatalUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// ClearPatient clears the patient edge to Patient.
func (auo *AntenatalUpdateOne) ClearPatient() *AntenatalUpdateOne {
	auo.mutation.ClearPatient()
	return auo
}

// ClearBabystatus clears the babystatus edge to Babystatus.
func (auo *AntenatalUpdateOne) ClearBabystatus() *AntenatalUpdateOne {
	auo.mutation.ClearBabystatus()
	return auo
}

// Save executes the query and returns the updated entity.
func (auo *AntenatalUpdateOne) Save(ctx context.Context) (*Antenatal, error) {

	var (
		err  error
		node *Antenatal
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AntenatalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AntenatalUpdateOne) SaveX(ctx context.Context) *Antenatal {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *AntenatalUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AntenatalUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AntenatalUpdateOne) sqlSave(ctx context.Context) (a *Antenatal, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   antenatal.Table,
			Columns: antenatal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: antenatal.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Antenatal.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: antenatal.FieldAddedTime,
		})
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.UserTable,
			Columns: []string{antenatal.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.UserTable,
			Columns: []string{antenatal.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.PatientTable,
			Columns: []string{antenatal.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.PatientTable,
			Columns: []string{antenatal.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.BabystatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.BabystatusTable,
			Columns: []string{antenatal.BabystatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: babystatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.BabystatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.BabystatusTable,
			Columns: []string{antenatal.BabystatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: babystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	a = &Antenatal{config: auo.config}
	_spec.Assign = a.assignValues
	_spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{antenatal.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
