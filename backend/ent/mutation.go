// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/F12aPPy/app/ent/antenatal"
	"github.com/F12aPPy/app/ent/babystatus"
	"github.com/F12aPPy/app/ent/patient"
	"github.com/F12aPPy/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAntenatal  = "Antenatal"
	TypeBabystatus = "Babystatus"
	TypePatient    = "Patient"
	TypeUser       = "User"
)

// AntenatalMutation represents an operation that mutate the Antenatals
// nodes in the graph.
type AntenatalMutation struct {
	config
	op                Op
	typ               string
	id                *int
	added_time        *time.Time
	clearedFields     map[string]struct{}
	user              *int
	cleareduser       bool
	patient           *int
	clearedpatient    bool
	babystatus        *int
	clearedbabystatus bool
	done              bool
	oldValue          func(context.Context) (*Antenatal, error)
}

var _ ent.Mutation = (*AntenatalMutation)(nil)

// antenatalOption allows to manage the mutation configuration using functional options.
type antenatalOption func(*AntenatalMutation)

// newAntenatalMutation creates new mutation for $n.Name.
func newAntenatalMutation(c config, op Op, opts ...antenatalOption) *AntenatalMutation {
	m := &AntenatalMutation{
		config:        c,
		op:            op,
		typ:           TypeAntenatal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAntenatalID sets the id field of the mutation.
func withAntenatalID(id int) antenatalOption {
	return func(m *AntenatalMutation) {
		var (
			err   error
			once  sync.Once
			value *Antenatal
		)
		m.oldValue = func(ctx context.Context) (*Antenatal, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Antenatal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAntenatal sets the old Antenatal of the mutation.
func withAntenatal(node *Antenatal) antenatalOption {
	return func(m *AntenatalMutation) {
		m.oldValue = func(context.Context) (*Antenatal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AntenatalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AntenatalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *AntenatalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAddedTime sets the added_time field.
func (m *AntenatalMutation) SetAddedTime(t time.Time) {
	m.added_time = &t
}

// AddedTime returns the added_time value in the mutation.
func (m *AntenatalMutation) AddedTime() (r time.Time, exists bool) {
	v := m.added_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedTime returns the old added_time value of the Antenatal.
// If the Antenatal object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AntenatalMutation) OldAddedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddedTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedTime: %w", err)
	}
	return oldValue.AddedTime, nil
}

// ResetAddedTime reset all changes of the "added_time" field.
func (m *AntenatalMutation) ResetAddedTime() {
	m.added_time = nil
}

// SetUserID sets the user edge to User by id.
func (m *AntenatalMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *AntenatalMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *AntenatalMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *AntenatalMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *AntenatalMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *AntenatalMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetPatientID sets the patient edge to Patient by id.
func (m *AntenatalMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *AntenatalMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *AntenatalMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *AntenatalMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *AntenatalMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *AntenatalMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetBabystatusID sets the babystatus edge to Babystatus by id.
func (m *AntenatalMutation) SetBabystatusID(id int) {
	m.babystatus = &id
}

// ClearBabystatus clears the babystatus edge to Babystatus.
func (m *AntenatalMutation) ClearBabystatus() {
	m.clearedbabystatus = true
}

// BabystatusCleared returns if the edge babystatus was cleared.
func (m *AntenatalMutation) BabystatusCleared() bool {
	return m.clearedbabystatus
}

// BabystatusID returns the babystatus id in the mutation.
func (m *AntenatalMutation) BabystatusID() (id int, exists bool) {
	if m.babystatus != nil {
		return *m.babystatus, true
	}
	return
}

// BabystatusIDs returns the babystatus ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// BabystatusID instead. It exists only for internal usage by the builders.
func (m *AntenatalMutation) BabystatusIDs() (ids []int) {
	if id := m.babystatus; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBabystatus reset all changes of the "babystatus" edge.
func (m *AntenatalMutation) ResetBabystatus() {
	m.babystatus = nil
	m.clearedbabystatus = false
}

// Op returns the operation name.
func (m *AntenatalMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Antenatal).
func (m *AntenatalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *AntenatalMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.added_time != nil {
		fields = append(fields, antenatal.FieldAddedTime)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *AntenatalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case antenatal.FieldAddedTime:
		return m.AddedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *AntenatalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case antenatal.FieldAddedTime:
		return m.OldAddedTime(ctx)
	}
	return nil, fmt.Errorf("unknown Antenatal field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AntenatalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case antenatal.FieldAddedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedTime(v)
		return nil
	}
	return fmt.Errorf("unknown Antenatal field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *AntenatalMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *AntenatalMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AntenatalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Antenatal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *AntenatalMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *AntenatalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *AntenatalMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Antenatal nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *AntenatalMutation) ResetField(name string) error {
	switch name {
	case antenatal.FieldAddedTime:
		m.ResetAddedTime()
		return nil
	}
	return fmt.Errorf("unknown Antenatal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *AntenatalMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, antenatal.EdgeUser)
	}
	if m.patient != nil {
		edges = append(edges, antenatal.EdgePatient)
	}
	if m.babystatus != nil {
		edges = append(edges, antenatal.EdgeBabystatus)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *AntenatalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case antenatal.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case antenatal.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case antenatal.EdgeBabystatus:
		if id := m.babystatus; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *AntenatalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *AntenatalMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *AntenatalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, antenatal.EdgeUser)
	}
	if m.clearedpatient {
		edges = append(edges, antenatal.EdgePatient)
	}
	if m.clearedbabystatus {
		edges = append(edges, antenatal.EdgeBabystatus)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *AntenatalMutation) EdgeCleared(name string) bool {
	switch name {
	case antenatal.EdgeUser:
		return m.cleareduser
	case antenatal.EdgePatient:
		return m.clearedpatient
	case antenatal.EdgeBabystatus:
		return m.clearedbabystatus
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *AntenatalMutation) ClearEdge(name string) error {
	switch name {
	case antenatal.EdgeUser:
		m.ClearUser()
		return nil
	case antenatal.EdgePatient:
		m.ClearPatient()
		return nil
	case antenatal.EdgeBabystatus:
		m.ClearBabystatus()
		return nil
	}
	return fmt.Errorf("unknown Antenatal unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *AntenatalMutation) ResetEdge(name string) error {
	switch name {
	case antenatal.EdgeUser:
		m.ResetUser()
		return nil
	case antenatal.EdgePatient:
		m.ResetPatient()
		return nil
	case antenatal.EdgeBabystatus:
		m.ResetBabystatus()
		return nil
	}
	return fmt.Errorf("unknown Antenatal edge %s", name)
}

// BabystatusMutation represents an operation that mutate the Babystatuses
// nodes in the graph.
type BabystatusMutation struct {
	config
	op                Op
	typ               string
	id                *int
	babystatus_name   *string
	clearedFields     map[string]struct{}
	antenatals        map[int]struct{}
	removedantenatals map[int]struct{}
	done              bool
	oldValue          func(context.Context) (*Babystatus, error)
}

var _ ent.Mutation = (*BabystatusMutation)(nil)

// babystatusOption allows to manage the mutation configuration using functional options.
type babystatusOption func(*BabystatusMutation)

// newBabystatusMutation creates new mutation for $n.Name.
func newBabystatusMutation(c config, op Op, opts ...babystatusOption) *BabystatusMutation {
	m := &BabystatusMutation{
		config:        c,
		op:            op,
		typ:           TypeBabystatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBabystatusID sets the id field of the mutation.
func withBabystatusID(id int) babystatusOption {
	return func(m *BabystatusMutation) {
		var (
			err   error
			once  sync.Once
			value *Babystatus
		)
		m.oldValue = func(ctx context.Context) (*Babystatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Babystatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBabystatus sets the old Babystatus of the mutation.
func withBabystatus(node *Babystatus) babystatusOption {
	return func(m *BabystatusMutation) {
		m.oldValue = func(context.Context) (*Babystatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BabystatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BabystatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BabystatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetBabystatusName sets the babystatus_name field.
func (m *BabystatusMutation) SetBabystatusName(s string) {
	m.babystatus_name = &s
}

// BabystatusName returns the babystatus_name value in the mutation.
func (m *BabystatusMutation) BabystatusName() (r string, exists bool) {
	v := m.babystatus_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBabystatusName returns the old babystatus_name value of the Babystatus.
// If the Babystatus object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BabystatusMutation) OldBabystatusName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBabystatusName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBabystatusName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBabystatusName: %w", err)
	}
	return oldValue.BabystatusName, nil
}

// ResetBabystatusName reset all changes of the "babystatus_name" field.
func (m *BabystatusMutation) ResetBabystatusName() {
	m.babystatus_name = nil
}

// AddAntenatalIDs adds the antenatals edge to Antenatal by ids.
func (m *BabystatusMutation) AddAntenatalIDs(ids ...int) {
	if m.antenatals == nil {
		m.antenatals = make(map[int]struct{})
	}
	for i := range ids {
		m.antenatals[ids[i]] = struct{}{}
	}
}

// RemoveAntenatalIDs removes the antenatals edge to Antenatal by ids.
func (m *BabystatusMutation) RemoveAntenatalIDs(ids ...int) {
	if m.removedantenatals == nil {
		m.removedantenatals = make(map[int]struct{})
	}
	for i := range ids {
		m.removedantenatals[ids[i]] = struct{}{}
	}
}

// RemovedAntenatals returns the removed ids of antenatals.
func (m *BabystatusMutation) RemovedAntenatalsIDs() (ids []int) {
	for id := range m.removedantenatals {
		ids = append(ids, id)
	}
	return
}

// AntenatalsIDs returns the antenatals ids in the mutation.
func (m *BabystatusMutation) AntenatalsIDs() (ids []int) {
	for id := range m.antenatals {
		ids = append(ids, id)
	}
	return
}

// ResetAntenatals reset all changes of the "antenatals" edge.
func (m *BabystatusMutation) ResetAntenatals() {
	m.antenatals = nil
	m.removedantenatals = nil
}

// Op returns the operation name.
func (m *BabystatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Babystatus).
func (m *BabystatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BabystatusMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.babystatus_name != nil {
		fields = append(fields, babystatus.FieldBabystatusName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BabystatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case babystatus.FieldBabystatusName:
		return m.BabystatusName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BabystatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case babystatus.FieldBabystatusName:
		return m.OldBabystatusName(ctx)
	}
	return nil, fmt.Errorf("unknown Babystatus field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BabystatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case babystatus.FieldBabystatusName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBabystatusName(v)
		return nil
	}
	return fmt.Errorf("unknown Babystatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BabystatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BabystatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BabystatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Babystatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BabystatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BabystatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BabystatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Babystatus nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BabystatusMutation) ResetField(name string) error {
	switch name {
	case babystatus.FieldBabystatusName:
		m.ResetBabystatusName()
		return nil
	}
	return fmt.Errorf("unknown Babystatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BabystatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.antenatals != nil {
		edges = append(edges, babystatus.EdgeAntenatals)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BabystatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case babystatus.EdgeAntenatals:
		ids := make([]ent.Value, 0, len(m.antenatals))
		for id := range m.antenatals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BabystatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedantenatals != nil {
		edges = append(edges, babystatus.EdgeAntenatals)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BabystatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case babystatus.EdgeAntenatals:
		ids := make([]ent.Value, 0, len(m.removedantenatals))
		for id := range m.removedantenatals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BabystatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BabystatusMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BabystatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Babystatus unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BabystatusMutation) ResetEdge(name string) error {
	switch name {
	case babystatus.EdgeAntenatals:
		m.ResetAntenatals()
		return nil
	}
	return fmt.Errorf("unknown Babystatus edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op                Op
	typ               string
	id                *int
	patient_name      *string
	patient_age       *int
	addpatient_age    *int
	clearedFields     map[string]struct{}
	antenatals        map[int]struct{}
	removedantenatals map[int]struct{}
	done              bool
	oldValue          func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPatientName sets the patient_name field.
func (m *PatientMutation) SetPatientName(s string) {
	m.patient_name = &s
}

// PatientName returns the patient_name value in the mutation.
func (m *PatientMutation) PatientName() (r string, exists bool) {
	v := m.patient_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old patient_name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ResetPatientName reset all changes of the "patient_name" field.
func (m *PatientMutation) ResetPatientName() {
	m.patient_name = nil
}

// SetPatientAge sets the patient_age field.
func (m *PatientMutation) SetPatientAge(i int) {
	m.patient_age = &i
	m.addpatient_age = nil
}

// PatientAge returns the patient_age value in the mutation.
func (m *PatientMutation) PatientAge() (r int, exists bool) {
	v := m.patient_age
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientAge returns the old patient_age value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientAge: %w", err)
	}
	return oldValue.PatientAge, nil
}

// AddPatientAge adds i to patient_age.
func (m *PatientMutation) AddPatientAge(i int) {
	if m.addpatient_age != nil {
		*m.addpatient_age += i
	} else {
		m.addpatient_age = &i
	}
}

// AddedPatientAge returns the value that was added to the patient_age field in this mutation.
func (m *PatientMutation) AddedPatientAge() (r int, exists bool) {
	v := m.addpatient_age
	if v == nil {
		return
	}
	return *v, true
}

// ResetPatientAge reset all changes of the "patient_age" field.
func (m *PatientMutation) ResetPatientAge() {
	m.patient_age = nil
	m.addpatient_age = nil
}

// AddAntenatalIDs adds the antenatals edge to Antenatal by ids.
func (m *PatientMutation) AddAntenatalIDs(ids ...int) {
	if m.antenatals == nil {
		m.antenatals = make(map[int]struct{})
	}
	for i := range ids {
		m.antenatals[ids[i]] = struct{}{}
	}
}

// RemoveAntenatalIDs removes the antenatals edge to Antenatal by ids.
func (m *PatientMutation) RemoveAntenatalIDs(ids ...int) {
	if m.removedantenatals == nil {
		m.removedantenatals = make(map[int]struct{})
	}
	for i := range ids {
		m.removedantenatals[ids[i]] = struct{}{}
	}
}

// RemovedAntenatals returns the removed ids of antenatals.
func (m *PatientMutation) RemovedAntenatalsIDs() (ids []int) {
	for id := range m.removedantenatals {
		ids = append(ids, id)
	}
	return
}

// AntenatalsIDs returns the antenatals ids in the mutation.
func (m *PatientMutation) AntenatalsIDs() (ids []int) {
	for id := range m.antenatals {
		ids = append(ids, id)
	}
	return
}

// ResetAntenatals reset all changes of the "antenatals" edge.
func (m *PatientMutation) ResetAntenatals() {
	m.antenatals = nil
	m.removedantenatals = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.patient_name != nil {
		fields = append(fields, patient.FieldPatientName)
	}
	if m.patient_age != nil {
		fields = append(fields, patient.FieldPatientAge)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientName:
		return m.PatientName()
	case patient.FieldPatientAge:
		return m.PatientAge()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldPatientName:
		return m.OldPatientName(ctx)
	case patient.FieldPatientAge:
		return m.OldPatientAge(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	case patient.FieldPatientAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	var fields []string
	if m.addpatient_age != nil {
		fields = append(fields, patient.FieldPatientAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientAge:
		return m.AddedPatientAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPatientAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldPatientName:
		m.ResetPatientName()
		return nil
	case patient.FieldPatientAge:
		m.ResetPatientAge()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.antenatals != nil {
		edges = append(edges, patient.EdgeAntenatals)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeAntenatals:
		ids := make([]ent.Value, 0, len(m.antenatals))
		for id := range m.antenatals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedantenatals != nil {
		edges = append(edges, patient.EdgeAntenatals)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeAntenatals:
		ids := make([]ent.Value, 0, len(m.removedantenatals))
		for id := range m.removedantenatals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeAntenatals:
		m.ResetAntenatals()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                Op
	typ               string
	id                *int
	user_name         *string
	user_email        *string
	clearedFields     map[string]struct{}
	antenatals        map[int]struct{}
	removedantenatals map[int]struct{}
	done              bool
	oldValue          func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserName sets the user_name field.
func (m *UserMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the user_name value in the mutation.
func (m *UserMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old user_name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName reset all changes of the "user_name" field.
func (m *UserMutation) ResetUserName() {
	m.user_name = nil
}

// SetUserEmail sets the user_email field.
func (m *UserMutation) SetUserEmail(s string) {
	m.user_email = &s
}

// UserEmail returns the user_email value in the mutation.
func (m *UserMutation) UserEmail() (r string, exists bool) {
	v := m.user_email
	if v == nil {
		return
	}
	return *v, true
}

// OldUserEmail returns the old user_email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUserEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserEmail: %w", err)
	}
	return oldValue.UserEmail, nil
}

// ResetUserEmail reset all changes of the "user_email" field.
func (m *UserMutation) ResetUserEmail() {
	m.user_email = nil
}

// AddAntenatalIDs adds the antenatals edge to Antenatal by ids.
func (m *UserMutation) AddAntenatalIDs(ids ...int) {
	if m.antenatals == nil {
		m.antenatals = make(map[int]struct{})
	}
	for i := range ids {
		m.antenatals[ids[i]] = struct{}{}
	}
}

// RemoveAntenatalIDs removes the antenatals edge to Antenatal by ids.
func (m *UserMutation) RemoveAntenatalIDs(ids ...int) {
	if m.removedantenatals == nil {
		m.removedantenatals = make(map[int]struct{})
	}
	for i := range ids {
		m.removedantenatals[ids[i]] = struct{}{}
	}
}

// RemovedAntenatals returns the removed ids of antenatals.
func (m *UserMutation) RemovedAntenatalsIDs() (ids []int) {
	for id := range m.removedantenatals {
		ids = append(ids, id)
	}
	return
}

// AntenatalsIDs returns the antenatals ids in the mutation.
func (m *UserMutation) AntenatalsIDs() (ids []int) {
	for id := range m.antenatals {
		ids = append(ids, id)
	}
	return
}

// ResetAntenatals reset all changes of the "antenatals" edge.
func (m *UserMutation) ResetAntenatals() {
	m.antenatals = nil
	m.removedantenatals = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.user_name != nil {
		fields = append(fields, user.FieldUserName)
	}
	if m.user_email != nil {
		fields = append(fields, user.FieldUserEmail)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserName:
		return m.UserName()
	case user.FieldUserEmail:
		return m.UserEmail()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserName:
		return m.OldUserName(ctx)
	case user.FieldUserEmail:
		return m.OldUserEmail(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case user.FieldUserEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserEmail(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserName:
		m.ResetUserName()
		return nil
	case user.FieldUserEmail:
		m.ResetUserEmail()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.antenatals != nil {
		edges = append(edges, user.EdgeAntenatals)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAntenatals:
		ids := make([]ent.Value, 0, len(m.antenatals))
		for id := range m.antenatals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedantenatals != nil {
		edges = append(edges, user.EdgeAntenatals)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAntenatals:
		ids := make([]ent.Value, 0, len(m.removedantenatals))
		for id := range m.removedantenatals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeAntenatals:
		m.ResetAntenatals()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
